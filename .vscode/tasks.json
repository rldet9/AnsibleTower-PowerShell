// Available variables which can be used inside of strings.
// ${workspaceRoot}: the root folder of the team
// ${file}: the current opened file
// ${relativeFile}: the current opened file relative to workspaceRoot
// ${fileBasename}: the current opened file's basename
// ${fileDirname}: the current opened file's dirname
// ${fileExtname}: the current opened file's extension
// ${cwd}: the current working directory of the spawned process
{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
"version": "2.0.0",

// Start PowerShell
  "windows": {
      "command": "${env:windir}/System32/WindowsPowerShell/v1.0/powershell.exe",
      "args": [ "-NoProfile", "-ExecutionPolicy", "Bypass" ]
  },
  "linux": {
      "command": "/usr/bin/pwsh",
      "args": [ "-NoProfile" ]
  },
  "osx": {
      "command": "/usr/local/bin/pwsh",
      "args": [ "-NoProfile" ]
},

  // Associate with test task runner
  "tasks": [
    {
        "label": "Clean",
        "type": "shell",
        "args": [
            "Write-Host 'Invoking Invoke-Build on Module.Build.ps1 -task Clean'; ./Invoke-Build.ps1 Module.Build.ps1 -task Clean;",
            "Invoke-Command { Write-Host 'Completed Clean task in task runner.' }"
        ],
        "problemMatcher": []
    },
    {
        "label": "Build",
        "type": "shell",
        "args": [
            "Write-Host 'Invoking Invoke-Build on Module.Build.ps1 -task Build'; ./Invoke-Build.ps1 Module.Build.ps1 -task Build;",
            "Invoke-Command { Write-Host 'Completed Build task in task runner.' }"
        ],
        "problemMatcher": [],
        "group": {
            "_id": "build",
            "isDefault": false
        }
    },
    {
        "label": "BuildHelp",
        "type": "shell",
        "args": [
            "Write-Host 'Invoking Invoke-Build on Module.Build.ps1 -task BuildHelp'; ./Invoke-Build.ps1 Module.Build.ps1 -task BuildHelp;",
            "Invoke-Command { Write-Host 'Completed BuildHelp task in task runner.' }"
        ],
        "problemMatcher": []
    },
    {
        "label": "Analyze",
        "type": "shell",
        "args": [
            "Write-Host 'Invoking Invoke-Build on Module.Build.ps1 -task Analyze'; ./Invoke-Build.ps1 Module.Build.ps1 -task Analyze;",
            "Invoke-Command { Write-Host 'Completed Analyze task in task runner.' }"
        ],
        "problemMatcher": []
    },
    {
        "label": "Install",
        "type": "shell",
        "args": [
            "Write-Host 'Invoking Invoke-Build on Module.Build.ps1 -task Install'; ./Invoke-Build.ps1 Module.Build.ps1 -task Install;",
            "Invoke-Command { Write-Host 'Completed Install task in task runner.' }"
        ],
        "problemMatcher": []
    },
    {
        "label": "Publish",
        "type": "shell",
        "args": [
            "Write-Host 'Invoking Invoke-Build on Module.Build.ps1 -task Publish'; ./Invoke-Build.ps1 Module.Build.ps1 -task Publish;",
            "Invoke-Command { Write-Host 'Completed Publish task in task runner.' }"
        ],
        "problemMatcher": []
    },
    {
        "label": "Test",
        "type": "shell",
        "args": [
            "Write-Host 'Invoking Pester'; Invoke-Pester -PesterOption @{IncludeVSCodeMarker=$true};",
            "Invoke-Command { Write-Host 'Completed Test task in task runner.' }"
        ],
        "problemMatcher": [
            {
                "owner": "powershell",
                "fileLocation": [
                    "absolute"
                ],
                "severity": "error",
                "pattern": [
                    {
                        "regexp": "^\\s*(\\[-\\]\\s*.*?)(\\d+)ms\\s*$",
                        "message": 1
                    },
                    {
                        "regexp": "^\\s+at\\s+[^,]+,\\s*(.*?):\\s+line\\s+(\\d+)$",
                        "file": 1,
                        "line": 2
                    }
                ]
            }
        ],
        "group": {
            "_id": "test",
            "isDefault": false
        }
    }
]
}